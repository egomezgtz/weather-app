{"version":3,"sources":["api.js","components/search/search.js","components/current-weather/current-weather.js","components/forecast/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["geoApiOptions","method","headers","X-RapidAPI-Key","X-RapidAPI-Host","WEATHER_API_URL","WEATHER_API_KEY","Search","_ref","onSearchChange","_useState","useState","_useState2","Object","slicedToArray","search","setSearch","react_default","a","createElement","es","placeholder","debounceTimeout","value","onChange","searchData","loadOptions","inputValue","fetch","concat","then","response","json","options","data","map","city","latitude","longitude","label","name","countryCode","CurrentWeather","className","weather","description","alt","src","icon","Math","round","main","temp","feels_like","wind","speed","humidity","pressure","WEEK_DAYS","Forecast","dayInAWeek","Date","getDay","forecastDays","slice","length","Fragment","dist_es","allowZeroExpanded","list","splice","item","idx","key","temp_max","temp_min","clouds","all","sea_level","App","currentWeather","setCurrentWeather","_useState3","_useState4","forecast","setForecast","search_search","_searchData$value$spl","split","_searchData$value$spl2","lat","lon","currentWeatherFetch","forecastFetch","Promise","asyncToGenerator","_regeneratorRuntime","mark","_callee","weatherResponse","forcastResponse","wrap","_context","prev","next","sent","objectSpread","stop","_x","apply","this","arguments","catch","console","log","current_weather_current_weather","components_forecast_forecast","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.fb1c60a6.chunk.js","sourcesContent":["export const geoApiOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"X-RapidAPI-Key\": \"8f97ed61f1mshdfd9177c52587d7p1c035fjsn5844c17b57de\",\r\n      \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\r\n    },\r\n  };\r\n  export const GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\r\n  \r\n  export const WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\r\n  export const WEATHER_API_KEY = \"388aa732731ba2a28b4f1cd4e3baf9a4\";","import React, { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n  const [search, setSearch] = useState(null);\r\n\r\n  const loadOptions = (inputValue) => {\r\n    return fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n      geoApiOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        return {\r\n          options: response.data.map((city) => {\r\n            return {\r\n              value: `${city.latitude} ${city.longitude}`,\r\n              label: `${city.name}, ${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (searchData) => {\r\n    setSearch(searchData);\r\n    onSearchChange(searchData);\r\n  };\r\n\r\n  return (\r\n    <AsyncPaginate\r\n      placeholder=\"Search for city\"\r\n      debounceTimeout={600}\r\n      value={search}\r\n      onChange={handleOnChange}\r\n      loadOptions={loadOptions}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport \"./current-weather.css\";\r\n\r\nconst CurrentWeather = ({ data }) => {\r\n  return (\r\n    <div className=\"weather\">\r\n      <div className=\"top\">\r\n        <div>\r\n          <p className=\"city\">{data.city}</p>\r\n          <p className=\"weather-description\">{data.weather[0].description}</p>\r\n        </div>\r\n        <img\r\n          alt=\"weather\"\r\n          className=\"weather-icon\"\r\n          src={`icons/${data.weather[0].icon}.png`}\r\n        />\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <p className=\"temperature\">{Math.round(data.main.temp)}°C</p>\r\n        <div className=\"details\">\r\n          <div className=\"parameter-row\">\r\n            <span className=\"parameter-label\">Details</span>\r\n          </div>\r\n          <div className=\"parameter-row\">\r\n            <span className=\"parameter-label\">Feels like</span>\r\n            <span className=\"parameter-value\">\r\n              {Math.round(data.main.feels_like)}°C\r\n            </span>\r\n          </div>\r\n          <div className=\"parameter-row\">\r\n            <span className=\"parameter-label\">Wind</span>\r\n            <span className=\"parameter-value\">{data.wind.speed} m/s</span>\r\n          </div>\r\n          <div className=\"parameter-row\">\r\n            <span className=\"parameter-label\">Humidity</span>\r\n            <span className=\"parameter-value\">{data.main.humidity}%</span>\r\n          </div>\r\n          <div className=\"parameter-row\">\r\n            <span className=\"parameter-label\">Pressure</span>\r\n            <span className=\"parameter-value\">{data.main.pressure} hPa</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;","import React from \"react\";\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n} from \"react-accessible-accordion\";\r\nimport \"./forecast.css\";\r\n\r\nconst WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\nconst Forecast = ({ data }) => {\r\n  const dayInAWeek = new Date().getDay();\r\n  const forecastDays = WEEK_DAYS.slice(dayInAWeek, WEEK_DAYS.length).concat(WEEK_DAYS.slice(0, dayInAWeek));\r\n  \r\n  return (\r\n    <>\r\n      <label className=\"title\">Daily</label>\r\n      <Accordion allowZeroExpanded>\r\n        {data.list.splice(0, 7).map((item, idx) => (\r\n          <AccordionItem key={idx}>\r\n            <AccordionItemHeading>\r\n              <AccordionItemButton>\r\n                <div className=\"daily-item\">\r\n                  <img src={`icons/${item.weather[0].icon}.png`} className=\"icon-small\" alt=\"weather\" />\r\n                  <label className=\"day\">{forecastDays[idx]}</label>\r\n                  <label className=\"description\">{item.weather[0].description}</label>\r\n                  <label className=\"min-max\">{Math.round(item.main.temp_max)}°C /{Math.round(item.main.temp_min)}°C</label>\r\n                </div>\r\n              </AccordionItemButton>\r\n            </AccordionItemHeading>\r\n            <AccordionItemPanel>\r\n              <div className=\"daily-details-grid\">\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Pressure:</label>\r\n                  <label>{item.main.pressure}</label>\r\n                </div>\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Humidity:</label>\r\n                  <label>{item.main.humidity}</label>\r\n                </div>\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Clouds:</label>\r\n                  <label>{item.clouds.all}%</label>\r\n                </div>\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Wind speed:</label>\r\n                  <label>{item.wind.speed} m/s</label>\r\n                </div>\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Sea level:</label>\r\n                  <label>{item.main.sea_level}m</label>\r\n                </div>\r\n                <div className=\"daily-details-grid-item\">\r\n                  <label>Feels like:</label>\r\n                  <label>{item.main.feels_like}°C</label>\r\n                </div>\r\n              </div>\r\n            </AccordionItemPanel>\r\n          </AccordionItem>\r\n        ))}\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Forecast;","import React, { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch(console.log);\n  };\n\n  return (\n    <div className=\"container\">\n      <Search onSearchChange={handleOnSearchChange} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {forecast && <Forecast data={forecast} />}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}